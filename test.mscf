# configuration file used for testing

[import]
# __DATA_test__ is a symlink created by the test procedure, pointing to the real dir.
apex = __DATA_test__/ubiquitine_2D_000002.d
format = Apex
F1_specwidth = 500000
F2_specwidth = 500000
highmass = 2500

[processing]
# input file, if not present, will be created from apex above
infile = __DATA_test__/ubiquitine_2D_000002.msh5
# optionnal intermediate file name
# be careful, this one can be larger than both in and out files.
# if interfile absent, the temporary file will created in the designed temp directory and deleted at the end
#interfile = __DATA_test__/ubiquitine_temp.msh5
tempdir = __DATA_test__
# output file
outfile =  __DATA_test__/ubiquitine_2D_000002_mr.msh5

# file can be internally compressed by removing the weakest value lost in the noise
compress_outfile = True
# compress_level is the ratio of noise level that will be discarded, up to 3.0 (3 x sigma) it should be ok.
# the highest compress_level, the better the compression, but expect some distortions
compress_level = 3.0

#zerofilling = -1 -3
sizemultipliers = 0.5 0.5

largest_file = 64G      # largest autorized file - in bytes

# do_F2 : if false, processing along F2 (horizontal) is not performed
do_F2 = True
# do_F1 : if false, processing along F1 (vertical) is not performed
do_F1 = True

# special flags
# use_multiprocessing : if True, will use the python/multiprocessing to speed-up F1 computation
# will deploy on nb_proc core. - seems to be buggy on certain dstribution of python
# note that for large data-files   MPI   should be favored when available.
# in which case, use_multiprocessing and nb_proc are ignored
use_multiprocessing = False
nb_proc = 4
# do_urqrd : if True, the urQRd denoising is applied in F1
do_urqrd = False
# rank used for urqrd - 2 to 3 times the number of lines expected in columns
# urQRd processing time is proportionnal to this
urqrd_rank = 100

# do_f1demodu : if True, the F1 offset correction will be applied
do_f1demodu = True
# do_modulus : if True, a modulus will be applied at the end of the processing
do_modulus = True
# do_rem_ridge : if True, vertical ridges will be applied
do_rem_ridge = True

[visu2d]
# file to display
multresfile = __DATA_test__/ubiquitine_2D_000002_mr.msh5
#multresfile = __DATA_test__/seq.msh5


